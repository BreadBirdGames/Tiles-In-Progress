[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 color: hint_color = vec4(1.0);
uniform vec2 size = vec2(1280.0, 720.0);
uniform float line_width : hint_range(0, 1) = 0.1;
uniform vec2 offset = vec2(0.0, 0.0);
uniform float grid_size = 16.0;

uniform float position : hint_range(-0.5, 0.5) = 0.0;
uniform float shader_size : hint_range(0.5, 5) = 0.5;
uniform float angle : hint_range(0.0, 360.0) = 0.0;

uniform float divide = 0.065;      
uniform float blur = 0.385;        
uniform float fade_width = 0.995;  

void fragment() {
	vec2 uv = (offset / size) + UV;
	vec2 r = mod(size * uv, vec2(grid_size));
	vec2 lines = smoothstep(1.0 - line_width, 1, r / vec2(grid_size));
	float alpha = dot(lines, vec2(1.0, 1.0));
	
	COLOR = color;
	COLOR.a = alpha;
	
	float left_fade_edge = fade_width;

	float leftFade = 1.0;
	
	// Normalize to 0..1 within the fade width region
	if (UV.x < left_fade_edge) {
		float px = (1.0 - UV.x) / fade_width;
		leftFade = smoothstep(divide, divide + blur, px);
	}
	
	COLOR = mix(COLOR, color, leftFade);
	
	float pivot = position + 0.5;
	uv = UV - pivot;
	float rotated = uv.x * cos(radians(angle)) - uv.y * sin(radians(angle)); 
	float pos = smoothstep((1.0 - shader_size) + position, shader_size + 0.0001 + position, rotated + pivot);
	COLOR = mix(COLOR, color, pos);
}
"

[resource]
shader = SubResource( 1 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/size = Vector2( 3240, 540 )
shader_param/line_width = 0.05
shader_param/offset = Vector2( -0.2, 0 )
shader_param/grid_size = 54.0
shader_param/position = 0.45
shader_param/shader_size = 0.55
shader_param/angle = 270.0
shader_param/divide = 0.45
shader_param/blur = 0.01
shader_param/fade_width = 2.185
